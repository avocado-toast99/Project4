 /*
 *   هذا مبدئي طبعا بنغير في الكود
 */
package prrim;

import java.util.Arrays;

/**
 *
 * @author Beshoo
 */
public class Prrim {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        final int INF = 10000;

        int[][] Matrix = {
            //A   B   C    D    E    F    G   H   I
            {INF, 4, INF, INF, INF, INF, INF, 8, INF}, //A
            {4, INF, 8, INF, INF, INF, INF, 11, INF}, //B
            {INF, 8, INF, 7, INF, 4, INF, INF, 2}, //C
            {INF, INF, 7, INF, 9, 14, INF, INF, INF}, // D
            {INF, INF, INF, 9, INF, 10, INF, INF, INF}, //E 
            {INF, INF, 4, 14, 10, INF, 2, INF, INF}, //F
            {INF, INF, INF, INF, INF, 2, INF, 1, 6}, // G
            {8, 11, INF, INF, INF, INF, 1, INF, 7}, //H
            {INF, INF, 2, INF, INF, INF, 6, 7, INF} //I
        };

        
        // E = V-1
        int edges = Matrix.length-1;
        char[] Vertices = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'};
        Vertex[] Edges = new Vertex[edges];

        for (int i = 0; i < Edges.length; i++) {
            Edges[i] = new Vertex();
            Edges[i].setValue(Vertices[i]);
            Edges[i].list = new LinkedList();

        }
        int[] visited = new int[Matrix.length];
        int min = 0;
        int v = 0;
        int u = 0;
        int total = 0;
        visited[0] = 1;

        Prim(Matrix, visited, min, v, u, total, Vertices, Edges);
    }

    public static void Prim(int[][] Matrix, int[] visited, int min, int v, int u, int total, char[] Vertices, Vertex[] Edges) {

        System.out.println("The edge is : ");

        
        // E = V-1
        int edges = Matrix.length-1;
        for (int i = 0; i < edges; i++) {
            min = 999;

            for (int j = 0; j < Matrix.length; j++) {

                if (visited[j] == 1) {

                    for (int k = 0; k < Matrix.length; k++) {

                        if (visited[k] != 1) {

                            if (min > Matrix[j][k]) {

                                min = Matrix[j][k];

                                u = j;
                                v = k;
                                if (!Edges[j].list.search(Vertices[k])) {
                                    Edges[j].list.insert(Vertices[k]);
                                }

                            }
                        }
                    }
                }

            }
            visited[v] = 1;
            total += min;
           // System.out.println(u+","+v+" "+".. ");

        }
        System.out.println("");

        for (int i = 0; i < Edges.length; i++) {

            LLnode p = Edges[i].list.getHead();
            while (p != null) {
                //   Arrays.sort();
                System.out.print("(" + Edges[i].getValue() + ",");
                System.out.print(p.getData() + ")");
                p = p.getNext();
            }

        }
        System.out.println("");
        System.out.println("The minimum weight is :" + total);

    } // method prim 
}// class
